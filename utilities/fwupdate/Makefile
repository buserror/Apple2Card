# Makefile - build firmware update utility/disk.
#
#  Copyright (c) 2023 Thorsten C. Brehm
#
#  This software is provided 'as-is', without any express or implied
#  warranty. In no event will the authors be held liable for any damages
#  arising from the use of this software.
#
#  Permission is granted to anyone to use this software for any purpose,
#  including commercial applications, and to alter it and redistribute it
#  freely, subject to the following restrictions:
#
#  1. The origin of this software must not be misrepresented; you must not
#     claim that you wrote the original software. If you use this software
#     in a product, an acknowledgment in the product documentation would be
#     appreciated but is not required.
#  2. Altered source versions must be plainly marked as such, and must not be
#     misrepresented as being the original software.
#  3. This notice may not be removed or altered from any source distribution.

include ../../version.mk

ARDUINO 	:= ../../Apple2Arduino

# $1 = Platform name (328P, 644P) -- use uppercases it is used for PRODOS
# $2 = Flash Page size in *words*
# $3 = Firmware+bootloader file generated by arduino-cli
define generate
all: bin-$(1)/FWUPDATE$(1).SYSTEM
# build ProDOS executable
bin-$(1)/FWUPDATE$(1).SYSTEM: bin-$(1)/fwupdate.o bin-$(1)/dan2stk500.o
	@echo "Linking $$@"
	@ld65 -C apple2-system.cfg  -D __EXEHDR__=0 -vm -m bin-$(1)/FWUPDATE.list \
		-o $$@ bin-$(1)/fwupdate.o bin-$(1)/dan2stk500.o apple2.lib

# build firmware update module
bin-$(1)/fwupdate.o: fwupdate.c ../../version.mk | bin-$(1)
	@echo "Compiling fwupdate.c" $$@
	@cc65 -t apple2 -D__EXEHDR__=0 -DFW_VERSION=\"$$(FW_VERSION)\" -o bin-$(1)/fwupdate.asm fwupdate.c
	@ca65 -t apple2 -D__EXEHDR__=0 -o $$@ bin-$(1)/fwupdate.asm

# build STK500 updater
# This bizare contraption allows having C like macros in the assembly
# that is helpful when now using multiple platforms with different page size
# * We first pass the .asm file to cc65 -E, that creates (annoyingly) a .i in
#    the same directory as the .asm file.
# * We mv that file to the bin directory
# * Use 'sed' in-place to remove stray #line directives added by cc65
# * We pass *that* file in to the assembler
# Note, the bin-%/dan2stk500.asm file is kept, so you can 'diff'it.
bin-$(1)/dan2stk500.o: dan2stk500.asm bin-$(1)/fwimage.bin
	@echo "Assembling dan2stk500.asm"
	@(cd bin-$(1); \
		cc65 -E -D__EXEHDR__=0 -DM$(1)=1 \
			-DAVR_FILE_SIZE=$$(shell wc -c < bin-$(1)/fwimage.bin) \
			../$$< && mv ../$$(basename $$<).i $$< && \
		sed -i -e '/^#/d' $$< && \
		ca65 -t apple2 -D__EXEHDR__=0 -o $$(notdir $$@) $$< )

# generate include file with content of Arduino hex file
# Note the generated file is padded to 256 for convenience, however it
# should be fine and ought not to override the bootloader, as the
# bootloader page is always a multiple of 256
bin-$(1)/fwimage.bin: $(3) | bin-$(1)
	@echo "Converting Arduino firmware hex to binary"
	@python3 hex2bin.py --size 32768 --fillbyte 255 $(2) bin-$(1)/fwimage.bin

bin-$(1):
	mkdir -p bin-$(1)
endef

$(eval $(call generate,328P,$(ARDUINO)/bin-328p/Apple2Arduino.ino.hex))
# Only try to generate that firmware if the 644p has been compiled
HAS_644P := ${wildcard $(ARDUINO)/bin-644p/Apple2Arduino.ino.hex}
ifneq ($(HAS_644P),)
$(eval $(call generate,644P,$(ARDUINO)/bin-644p/Apple2Arduino.ino.hex))
endif

clean:
	@echo "Clean up..."
	@rm -f bin-*/*

